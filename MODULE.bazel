# TODO: Migrate external dependencies from WORKSPACE to MODULE.bazel.
# Bazel now uses Bzlmod by default to manage external dependencies.
#
# https://bazel.build/external/module
# https://registry.bazel.build/
module(name = "symplectix")

http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

http_archive(
    name = "zlib",
    build_file = "//compress/zlib:BUILD.zlib.bazel",
    sha256 = "9a93b2b7dfdac77ceba5a558a580e74667dd6fede4585b91eefb60f03b72df23",
    strip_prefix = "zlib-1.3.1",
    urls = [
        "https://zlib.net/zlib-1.3.1.tar.gz",
        "https://storage.googleapis.com/mirror.tensorflow.org/zlib.net/zlib-1.3.1.tar.gz",
    ],
)

http_archive(
    name = "openssl",
    build_file = "//crypto/openssl:BUILD.openssl.bazel",
    integrity = "sha256-LopAsBl5r+i+C7+z3l3BxnCf7bRtbInBDaEUq1/D0oE=",
    strip_prefix = "openssl-3.3.2",
    urls = ["https://www.openssl.org/source/openssl-3.3.2.tar.gz"],
)

# Constraint values for specifying platforms and toolchains.
bazel_dep(name = "platforms", version = "0.0.10")

# Common useful functions and rules for Bazel.
bazel_dep(name = "bazel_skylib", version = "1.7.1")

# Starlark libraries and rules which are useful for
# constructing rulesets and BUILD files.
bazel_dep(name = "aspect_bazel_lib", version = "2.9.1")

bazel_lib = use_extension("@aspect_bazel_lib//lib:extensions.bzl", "toolchains")
bazel_lib.jq()
bazel_lib.yq()
use_repo(
    bazel_lib,
    "jq_toolchains",
    "yq_toolchains",
)

# Prebuilt binaries for buildifier and buildozer.
bazel_dep(name = "buildifier_prebuilt", version = "7.3.1", dev_dependency = True)

# Protocol Buffers - Google's data interchange format.
bazel_dep(name = "protobuf", version = "28.2")

# Pre-built protoc binary toolchain for Bazel, fetched from official protobuf releases.
# https://github.com/aspect-build/toolchains_protoc/releases
bazel_dep(name = "toolchains_protoc", version = "0.3.3")

# Bazel rules for building Protobuf and gRPC code and libraries from proto_library targets.
bazel_dep(name = "rules_proto_grpc", version = "5.0.0")
# bazel_dep(name = "rules_proto_grpc_doc", version = "<version number here>")
# bazel_dep(name = "rules_proto_grpc_grpcgateway", version = "<version number here>")
# bazel_dep(name = "rules_proto_grpc_buf", version = "<version number here>")
# bazel_dep(name = "rules_proto_grpc_cc", version = "<version number here>")
# bazel_dep(name = "rules_proto_grpc_go", version = "<version number here>")

# Non-hermetic C++ rules, contains an auto-detecting toolchain that
# expects to find tools installed on the host machine.
# bazel_dep(name = "rules_cc", version = "0.0.9")

# Build rules for interfacing with "foreign" (non-Bazel) build systems
# (CMake, configure-make, GNU Make, boost, ninja, Meson).
bazel_dep(name = "rules_foreign_cc", version = "0.12.0")

# Perl rules, to build openssl.
bazel_dep(name = "rules_perl", version = "0.2.3.bcr.1")

# Rules for creating packages (zip, tar, deb, rpm, ...).
bazel_dep(name = "rules_pkg", version = "1.0.1")

# Rust rules for Bazel.
bazel_dep(name = "rules_rust", version = "0.52.0")

# Go rules for Bazel.
bazel_dep(name = "rules_go", version = "0.50.1")

# Bazel build file generator for Bazel projects.
# It natively supports Go and protobuf, and it may be extended to support new languages and custom rule sets.
bazel_dep(name = "gazelle", version = "0.39.1")

RUST_EDITION = "2021"

RUST_STABLE_VERSION = "1.81.0"

# https://github.com/oxalica/rust-overlay/tree/master/manifests/nightly
RUST_NIGHTLY_VERSION = "nightly/2024-09-01"

rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
rust.toolchain(
    edition = RUST_EDITION,
    versions = [
        RUST_STABLE_VERSION,
        RUST_NIGHTLY_VERSION,
    ],
)
use_repo(rust, "rust_toolchains")

register_toolchains("@rust_toolchains//:all")

register_toolchains("@//protobuf/prost:prost_toolchain")

crate = use_extension("@rules_rust//crate_universe:extension.bzl", "crate", isolate = True)
crate.spec(
    package = "libc",
    version = "0.2",
)
crate.spec(
    features = ["libc"],
    package = "libz-sys",
    version = "1.1",
)
crate.annotation(
    crate = "libz-sys",
    gen_build_script = "off",
    deps = ["@zlib"],
)
crate.spec(
    package = "openssl",
    version = "0.10.64",
)
crate.spec(
    package = "openssl-sys",
    version = "0.9.101",
)
crate.annotation(
    build_script_data = [
        "@openssl//:openssl_dir",
        "@openssl//:openssl",
    ],
    # https://github.com/sfackler/rust-openssl/tree/master/openssl-sys/build
    build_script_data_glob = ["build/**/*.c"],
    build_script_env = {
        "OPENSSL_DIR": "$(execpath @openssl//:openssl_dir)",
        "OPENSSL_STATIC": "1",
    },
    crate = "openssl-sys",
    data = ["@openssl"],
    deps = ["@openssl"],
)

# A framework for serializing and deserializing Rust data structures.
crate.spec(
    features = ["derive"],
    package = "serde",
    version = "1",
)

# Futures extensions
crate.spec(
    package = "futures",
    version = "0.3",
)

# Async runtime
crate.spec(
    features = ["full"],
    package = "tokio",
    version = "1.36",
)

# Async fn in traits
# https://blog.rust-lang.org/inside-rust/2022/11/17/async-fn-in-trait-nightly.html
crate.spec(
    package = "async-trait",
    version = "0.1",
)

# Tracing
crate.spec(
    package = "tracing",
    version = "0.1",
)
crate.spec(
    package = "tracing-subscriber",
    version = "0.3",
)

# Protobuf support for Rust.
crate.spec(
    package = "prost",
    version = "0.13",
)
crate.spec(
    package = "prost-types",
    version = "0.13",
)
crate.spec(
    package = "prost-reflect",
    version = "0.14",
)
crate.spec(
    package = "tonic",
    version = "0.12",
)
crate.spec(
    package = "tonic-build",
    version = "0.12",
)
crate.spec(
    package = "tonic-types",
    version = "0.12",
)
crate.spec(
    package = "tonic-health",
    version = "0.12",
)
crate.spec(
    package = "tonic-reflection",
    version = "0.12",
)

# Proroc plugins for prost/tonic.
crate.spec(
    package = "protoc-gen-prost",
    version = "0.4",
)
crate.annotation(
    crate = "protoc-gen-prost",
    gen_binaries = ["protoc-gen-prost"],
)
crate.spec(
    package = "protoc-gen-tonic",
    version = "0.4",
)
crate.annotation(
    crate = "protoc-gen-tonic",
    gen_binaries = ["protoc-gen-tonic"],
)

# A tree-sitter binding.
# Tree-sitter is a parser generator tool and an incremental parsing library.
#
# https://tree-sitter.github.io/tree-sitter/
crate.spec(
    package = "tree-sitter",
    version = "0.20",
)
crate.spec(
    package = "tree-sitter-cli",
    version = "0.20",
)
crate.annotation(
    crate = "tree-sitter-cli",
    gen_binaries = ["tree-sitter"],
)

# Rust grammar for tree-sitter.
crate.spec(
    package = "tree-sitter-rust",
    version = "0.20",
)

# Arguments parsing.
crate.spec(
    features = ["derive"],
    package = "clap",
    version = "4.3",
)

# A collection of numeric types and traits.
crate.spec(
    package = "num",
    version = "0.4",
)

# Includes formatters and parsers for std::time::SystemTime and std::time::Duration.
crate.spec(
    package = "humantime",
    version = "2",
)
crate.spec(
    package = "time",
    version = ">=0.3.35",
)

# Result/Error helpers.
crate.spec(
    package = "anyhow",
    version = "1",
)
crate.spec(
    package = "thiserror",
    version = "1",
)

# Provides a macro to generate structures which behave like a set of bitflags
crate.spec(
    package = "bitflags",
    version = "2",
)

# Temporary files and directories.
crate.spec(
    package = "tempfile",
    version = "3",
)

# Single assignment cells and lazy statics without macros.
#
# TODO: Use std::cell::OnceCell
# Parts of once_cell API are included into std as of Rust 1.70.0.
# https://doc.rust-lang.org/std/cell/struct.OnceCell.html
crate.spec(
    package = "once_cell",
    version = "1.18",
)

# For testing.
crate.spec(
    package = "quickcheck",
    version = "1",
)
crate.spec(
    package = "quickcheck_macros",
    version = "1",
)
crate.spec(
    features = ["derive"],
    package = "arbitrary",
    version = "1",
)
crate.spec(
    package = "libfuzzer-sys",
    version = "0.4.0",
)
crate.from_specs()
use_repo(crate, "crates")

GO_VERSION = "1.23.2"

go_sdk = use_extension("@rules_go//go:extensions.bzl", "go_sdk")

# Download an SDK for the host OS & architecture as well as common remote execution platforms.
go_sdk.download(version = GO_VERSION)

# TODO: Setup nogo
# go_sdk.nogo(
#     nogo = "//tools/nogo",
#     includes = [
#         "//:__subpackages__",
#         "@my_own_go_dep//logic:__pkg__",
#     ],
#     excludes = [
#         "//third_party:__subpackages__",
#     ],
# )

go_deps = use_extension("@gazelle//:extensions.bzl", "go_deps")

# Manage Go dependencies via go.mod.
go_deps.from_file(go_mod = "//:go.mod")

# Rules for building OCI containers.
bazel_dep(name = "rules_oci", version = "2.0.0")

# Validate the structure of container images.
bazel_dep(name = "container_structure_test", version = "1.19.1")

oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")
oci.pull(
    name = "distroless_cc_nonroot",
    digest = "sha256:880bcf2ca034ab5e8ae76df0bd50d700e54eb44e948877244b130e3fcd5a1d66",
    image = "gcr.io/distroless/cc",
    platforms = [
        "linux/amd64",
        "linux/arm64",
    ],
)

# For each oci.pull call, repeat the "name" here to expose them as dependencies.
use_repo(
    oci,
    "distroless_cc_nonroot",
    "distroless_cc_nonroot_linux_amd64",
    "distroless_cc_nonroot_linux_arm64",
)
