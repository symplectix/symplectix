workspace(name = "trunk")

load("//:workspace.bzl", "versions", "workspace_dependencies", "workspace_toolchains")

workspace_dependencies()

workspace_toolchains()

# Build rules for interfacing with "foreign" (non-Bazel) build systems
# (CMake, configure-make, GNU Make, boost, ninja, Meson).
load("@rules_foreign_cc//foreign_cc:repositories.bzl", "rules_foreign_cc_dependencies")

rules_foreign_cc_dependencies()

load("@rules_rust//rust:repositories.bzl", "rules_rust_dependencies", "rust_register_toolchains")

rules_rust_dependencies()

rust_register_toolchains(
    edition = versions.rust.edition,
    versions = versions.rust.versions,
)

load("@rules_rust//tools/rust_analyzer:deps.bzl", "rust_analyzer_dependencies")

# Load the dependencies for the rust-project.json generator tool.
# To regenerate the rust-project.json file:
#   bazel run @rules_rust//tools/rust_analyzer:gen_rust_project
rust_analyzer_dependencies()

load("@rules_proto//proto:repositories.bzl", "rules_proto_dependencies", "rules_proto_toolchains")

rules_proto_dependencies()

rules_proto_toolchains()

load("@rules_proto_grpc//:repositories.bzl", "rules_proto_grpc_repos", "rules_proto_grpc_toolchains")

rules_proto_grpc_toolchains()

rules_proto_grpc_repos()

# For prost and tonic.
load("@rules_rust//proto/prost:repositories.bzl", "rust_prost_dependencies")
load("@rules_rust//proto/prost:transitive_repositories.bzl", "rust_prost_transitive_repositories")

rust_prost_dependencies()

rust_prost_transitive_repositories()

load("@rules_rust//crate_universe:defs.bzl", "splicing_config")

# If the current version of rules_rust is not a release artifact,
# you may need to set additional flags such as bootstrap = True.
load("@rules_rust//crate_universe:repositories.bzl", "crate_universe_dependencies")

crate_universe_dependencies()

load("//x/bin_crates:defs.bzl", "bin_crates")
load("//x/crates:defs.bzl", "crates")

# Cargo packages that contain a library. To generate Bazel targets for binaries,
# you must annotate on the package. See defs.bzl for working examples.
#
# CARGO_BAZEL_REPIN=1 CARGO_BAZEL_REPIN_ONLY=crates bazel sync --only=crates
crates.repository(
    splicing_config = splicing_config(
        # The resolver version to use in generated Cargo manifests.
        # This flag is only used when splicing a manifest from direct package definitions.
        # https://doc.rust-lang.org/cargo/reference/resolver.html#resolver-versions
        resolver_version = "2",
    ),
)

# The bin_crates repository is for cargo packages that contain binaries but no library.
# https://bazelbuild.github.io/rules_rust/crate_universe.html#binary-dependencies
#
# CARGO_BAZEL_REPIN=1 CARGO_BAZEL_REPIN_ONLY=bin_crates bazel sync --only=bin_crates
bin_crates.repository()

load("@bin_crates//:defs.bzl", bin_crates_repositories = "crate_repositories")
load("@crates//:defs.bzl", crates_repositories = "crate_repositories")

bin_crates_repositories()

crates_repositories()
