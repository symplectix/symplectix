workspace(name = "trunk")

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

http_archive(
    name = "zlib",
    build_file = "//x/zlib:BUILD.zlib.bazel",
    sha256 = "9a93b2b7dfdac77ceba5a558a580e74667dd6fede4585b91eefb60f03b72df23",
    strip_prefix = "zlib-1.3.1",
    urls = [
        "https://zlib.net/zlib-1.3.1.tar.gz",
        "https://storage.googleapis.com/mirror.tensorflow.org/zlib.net/zlib-1.3.1.tar.gz",
    ],
)

http_archive(
    name = "openssl",
    build_file = "//x/openssl:BUILD.openssl.bazel",
    sha256 = "83c7329fe52c850677d75e5d0b0ca245309b97e8ecbcfdc1dfdc4ab9fac35b39",
    strip_prefix = "openssl-3.2.1",
    urls = ["https://www.openssl.org/source/openssl-3.2.1.tar.gz"],
)

http_archive(
    name = "rules_foreign_cc",
    sha256 = "2a4d07cd64b0719b39a7c12218a3e507672b82a97b98c6a89d38565894cf7c51",
    strip_prefix = "rules_foreign_cc-0.9.0",
    url = "https://github.com/bazelbuild/rules_foreign_cc/archive/refs/tags/0.9.0.tar.gz",
)

http_archive(
    name = "rules_rust",
    integrity = "sha256-Y4v6kjQQfXxh5tU6FQB6YXux/ODFGUq3IlpgBV4Bwj8=",
    urls = ["https://github.com/bazelbuild/rules_rust/releases/download/0.41.0/rules_rust-v0.41.0.tar.gz"],
)

http_archive(
    name = "rules_proto",
    sha256 = "dc3fb206a2cb3441b485eb1e423165b231235a1ea9b031b4433cf7bc1fa460dd",
    strip_prefix = "rules_proto-5.3.0-21.7",
    urls = ["https://github.com/bazelbuild/rules_proto/archive/refs/tags/5.3.0-21.7.tar.gz"],
)

http_archive(
    name = "rules_proto_grpc",
    sha256 = "928e4205f701b7798ce32f3d2171c1918b363e9a600390a25c876f075f1efc0a",
    strip_prefix = "rules_proto_grpc-4.4.0",
    urls = ["https://github.com/rules-proto-grpc/rules_proto_grpc/releases/download/4.4.0/rules_proto_grpc-4.4.0.tar.gz"],
)

register_toolchains("//toolchains:prost_toolchain")

_RUST_EDITION = "2021"

_RUST_STABLE_VERSION = "1.77.0"

# https://github.com/oxalica/rust-overlay/tree/master/manifests/nightly
_RUST_NIGHTLY_VERSION = "nightly/2024-03-27"

# Build rules for interfacing with "foreign" (non-Bazel) build systems
# (CMake, configure-make, GNU Make, boost, ninja, Meson).
load("@rules_foreign_cc//foreign_cc:repositories.bzl", "rules_foreign_cc_dependencies")

rules_foreign_cc_dependencies()

load("@rules_rust//rust:repositories.bzl", "rules_rust_dependencies", "rust_register_toolchains")

rules_rust_dependencies()

rust_register_toolchains(
    edition = _RUST_EDITION,
    versions = [
        _RUST_STABLE_VERSION,
        _RUST_NIGHTLY_VERSION,
    ],
)

load("@rules_rust//tools/rust_analyzer:deps.bzl", "rust_analyzer_dependencies")

# Load the dependencies for the rust-project.json generator tool.
# To regenerate the rust-project.json file:
#   bazel run @rules_rust//tools/rust_analyzer:gen_rust_project
rust_analyzer_dependencies()

load("@rules_proto//proto:repositories.bzl", "rules_proto_dependencies", "rules_proto_toolchains")

rules_proto_dependencies()

rules_proto_toolchains()

load("@rules_proto_grpc//:repositories.bzl", "rules_proto_grpc_repos", "rules_proto_grpc_toolchains")

rules_proto_grpc_toolchains()

rules_proto_grpc_repos()

# For prost and tonic.
load("@rules_rust//proto/prost:repositories.bzl", "rust_prost_dependencies")
load("@rules_rust//proto/prost:transitive_repositories.bzl", "rust_prost_transitive_repositories")

rust_prost_dependencies()

rust_prost_transitive_repositories()

load("@rules_rust//crate_universe:defs.bzl", "splicing_config")

# If the current version of rules_rust is not a release artifact,
# you may need to set additional flags such as bootstrap = True.
load("@rules_rust//crate_universe:repositories.bzl", "crate_universe_dependencies")

crate_universe_dependencies()

load("//x/crates:defs.bzl", "crates")

# Cargo packages that contain a library. To generate Bazel targets for binaries,
# you must annotate on the package. See defs.bzl for working examples.
#
# CARGO_BAZEL_REPIN=1 CARGO_BAZEL_REPIN_ONLY=crates bazel sync --only=crates
crates.repository(
    name = "crates",
    cargo_lockfile = "//x/crates:Cargo.lock",
    lockfile = "//x/crates:Cargo.Bazel.lock",
    splicing_config = splicing_config(
        # The resolver version to use in generated Cargo manifests.
        # This flag is only used when splicing a manifest from direct package definitions.
        # https://doc.rust-lang.org/cargo/reference/resolver.html#resolver-versions
        resolver_version = "2",
    ),
)

load("@crates//:defs.bzl", crates_repositories = "crate_repositories")

crates_repositories()

load("//x/bin_crates:defs.bzl", "bin_crates")

# The bin_crates repository is for cargo packages that contain binaries but no library.
# https://bazelbuild.github.io/rules_rust/crate_universe.html#binary-dependencies
#
# CARGO_BAZEL_REPIN=1 CARGO_BAZEL_REPIN_ONLY=bin_crates bazel sync --only=bin_crates
bin_crates.repository()

load("@bin_crates//:defs.bzl", bin_crates_repositories = "crate_repositories")

bin_crates_repositories()
