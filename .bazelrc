# Whether to announce rc options.
# https://bazel.build/reference/command-line-reference#flag--announce_rc
common:verbose --announce_rc

# If a command fails, print out the full command line.
# https://bazel.build/reference/command-line-reference#flag--verbose_failures
build:verbose --verbose_failures

# Specifies desired output mode. Valid values are
# - 'summary' to output only test status summary
# - 'errors' to also print test logs for failed tests
# - 'all' to print logs for all tests
# - 'streamed' to output logs for all tests in real time
# https://bazel.build/reference/command-line-reference#flag--test_output
test:verbose --test_output=errors

# https://bazel.build/docs/user-manual#workspace_status
common:stamp --stamp --workspace_status_command=stamp/workspace_status.sh

# Bazel picks up host-OS-specific config lines from bazelrc files.
# https://bazel.build/reference/command-line-reference#flag--enable_platform_specific_config
common --enable_platform_specific_config

# If set to true, tags will be propagated from a target to the actions' execution requirements;
# otherwise tags are not propagated. See https://github.com/bazelbuild/bazel/issues/8830 for details.
# https://bazel.build/reference/command-line-reference#flag--experimental_allow_tags_propagation
common --experimental_allow_tags_propagation

# Force the use of Clang for C++ builds.
build --action_env=CC=clang
build --action_env=CXX=clang++

# Disables a legacy feature where local sandboxed execution can silently fall back to non-sandboxed
# if an action can't be run in a sandbox. This will be the default flag in a future release (probably 7.0).
#
# https://github.com/bazelbuild/bazel/issues/16522
build --noincompatible_legacy_local_fallback

# Restricts network access by default for actions.
# https://bazel.build/reference/command-line-reference#flag--sandbox_default_allow_network
build --nosandbox_default_allow_network

# Change the current hostname to 'localhost' for sandboxed actions.
# https://bazel.build/reference/command-line-reference#flag--sandbox_fake_hostname
build --sandbox_fake_hostname

# Change the current username to 'nobody' for sandboxed actions.
# https://bazel.build/reference/command-line-reference#flag--sandbox_fake_username
build --sandbox_fake_username

# If set to true, each Linux sandbox will have its own dedicated empty directory mounted as /tmp rather than
# sharing /tmp with the host filesystem. Use --sandbox_add_mount_pair=/tmp to keep seeing the host's /tmp in all sandboxes.
# https://bazel.build/reference/command-line-reference#flag--incompatible_sandbox_hermetic_tmp
build --incompatible_sandbox_hermetic_tmp

# If true, Bazel uses an environment with a static value for PATH and does not inherit LD_LIBRARY_PATH or TMPDIR.
# https://bazel.build/reference/command-line-reference#flag--incompatible_strict_action_env
build --incompatible_strict_action_env

# rustc flags for proc-macros, cargo_build_script, etc.
build --@rules_rust//:extra_exec_rustc_flags=-Copt-level=3

# * The platfrom `stable` should be the default target.
#
# * Some tools like sanitizers depend on nightly.
#   https://github.com/bazelbuild/rules_rust/blob/main/rust/toolchain/channel/BUILD.bazel
build:stable --platforms=//platforms:stable
build:stable --@rules_rust//rust/toolchain/channel=stable
build:nightly --platforms=//platforms:nightly
build:nightly --@rules_rust//rust/toolchain/channel=nightly

# compilation_mode to rustc codegen options
# fastbuild: -Copt-level=0 -Cdebuginfo=0
# dbg:       -Copt-level=0 -Cdebuginfo=2
# opt:       -Copt-level=3 -Cdebuginfo=0
build:opt --compilation_mode=opt
build:opt --@rules_rust//:extra_rustc_flag=-Cdebug-assertions=off
build:opt --@rules_rust//:extra_rustc_flag=-Coverflow-checks=off
build:opt --@rules_rust//:extra_rustc_flag=-Cpanic=unwind
build:opt --@rules_rust//:extra_rustc_flag=-Clto=fat
build:opt --@rules_rust//:extra_rustc_flag=-Ccodegen-units=1

build:dbg --compilation_mode=dbg
build:dbg --@rules_rust//:extra_rustc_flag=-Cdebug-assertions=on
build:dbg --@rules_rust//:extra_rustc_flag=-Coverflow-checks=on
build:dbg --@rules_rust//:extra_rustc_flag=-Cpanic=unwind
build:dbg --@rules_rust//:extra_rustc_flag=-Clto=fat
build:dbg --@rules_rust//:extra_rustc_flag=-Ccodegen-units=32

# Controls whether Bazel will strip debugging information from all binaries and shared libraries,
# by invoking the linker with the -Wl,--strip-debug option.
build:strip --strip=always
# Controls stripping of debuginfo and similar auxiliary data from binaries during linking.
# * debuginfo - debuginfo sections and debuginfo symbols from the symbol table section are stripped at link time and are not copied to the produced binary or separate files.
# * symbols   - same as debuginfo, but the rest of the symbol table section is stripped as well if the linker supports it.
build:strip --@rules_rust//:extra_rustc_flag=-Cstrip=debuginfo

# clippy
build:clippy --aspects=@rules_rust//rust:defs.bzl%rust_clippy_aspect
build:clippy --output_groups=+clippy_checks
build --@rules_rust//:clippy.toml=//:.clippy.toml

# rustfmt
build:rustfmt --aspects=@rules_rust//rust:defs.bzl%rustfmt_aspect
build:rustfmt --output_groups=+rustfmt_checks
build --@rules_rust//:rustfmt.toml=//:.rustfmt.toml

build:lint --config=clippy
build:lint --config=rustfmt

build:ci --config=verbose
build:ci --config=lint
build:ci --config=stable
build:ci --config=opt
build:ci --config=strip

build:fuzz --config=verbose
build:fuzz --config=lint
build:fuzz --config=nightly
build:fuzz --config=dbg

# Disable sandoxing in CI for a while.
#
# TODO: Enable sandboxing.
# Since Bazel 7, the details are unknown, but builds in sandbox has
# started to fail with an error that process_wrapper.sh does not exist.
build:ci --spawn_strategy=local
build:fuzz --spawn_strategy=local

try-import %workspace%/.bazelrc.user
