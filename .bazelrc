# Allow the Bazel server to check directory sources for changes. Ensures that the Bazel server
# notices when a directory changes, if you have a directory listed in the srcs of some target.
#
# Recommended when using
# - copy_directory: https://github.com/bazel-contrib/bazel-lib/blob/main/docs/copy_directory.md
# - rules_js: https://github.com/aspect-build/rules_js
# since npm package are source directories inputs to copy_directory actions.
#
# https://bazel.build/reference/command-line-reference#flag--host_jvm_args
startup --host_jvm_args=-DBAZEL_TRACK_SOURCE_DIRECTORIES=1

# Use a directory on the file system as a remote cache.
# By default, Bazel has a build cache per workspace which keeps only the latest version
# of any target. Disk cache is useful for sharing build artifacts when switching branches
# and/or working on multiple workspaces of the same project, such as multiple checkouts.
#
# Since Bazel does not garbage-collect the directory,
# you might want to automate a periodic cleanup of this directory.
#
# https://bazel.build/remote/caching#disk-cache
common --disk_cache=~/.cache/bazel/disk/

# The repository cache is shared between all workspaces and installed versions of bazel.
# https://bazel.build/run/build#repository-cache
common --repository_cache=~/.cache/bazel/repository/

# Collect garbage entries from the disk cache.
#
# https://bazel.build/reference/command-line-reference#flag--experimental_disk_cache_gc_max_size
# https://bazel.build/reference/command-line-reference#flag--experimental_disk_cache_gc_max_age
build --experimental_disk_cache_gc_max_size=20G
build --experimental_disk_cache_gc_max_age=14d

# https://bazel.build/docs/user-manual#workspace_status
common:stamp --stamp --workspace_status_command=stamp/buildinfo.sh

# Bazel picks up host-OS-specific config lines from bazelrc files.
# https://bazel.build/reference/command-line-reference#flag--enable_platform_specific_config
common --enable_platform_specific_config

# Set default value of `allow_empty` to `False` in `glob()`. This prevents a common mistake when
# attempting to use `glob()` to match files in a subdirectory that is opaque to the current package
# because it contains a BUILD file. See https://github.com/bazelbuild/bazel/issues/8195.
# https://bazel.build/reference/command-line-reference#flag--incompatible_disallow_empty_glob
common --incompatible_disallow_empty_glob

# Enable the protoc toolchain support, introduced in Bazel 7.
common --incompatible_enable_proto_toolchain_resolution

# This parameter is experimental and may change at any time. Please do not depend on it.
#
# If true, this usage of the module extension will be isolated from all other usages, both in this and other modules.
# Tags created for this usage do not affect other usages and the repositories generated by the extension
# for this usage will be distinct from all other repositories generated by the extension.
#
# https://bazel.build/rules/lib/globals/module
common --experimental_isolated_extension_usages

# Output a heap dump if an OOM is thrown during a Bazel invocation.
# The dump will be written to `<output_base>/<invocation_id>.heapdump.hprof`.
#
# https://bazel.build/reference/command-line-reference#flag--heap_dump_on_oom
common --heap_dump_on_oom

# Do not build runfiles symlink forests for external repositories under
# `.runfiles/wsname/external/repo` (in addition to `.runfiles/repo`). This reduces runfiles &
# sandbox creation times & prevents accidentally depending on this feature which may flip to off by
# default in the future. Note, some rules may fail under this flag, please file issues with the rule
# author.
#
# https://bazel.build/reference/command-line-reference#flag--legacy_external_runfiles
build --nolegacy_external_runfiles

# Do not upload locally executed action results to the remote cache by default
# so local builds cannot poison the remote cache.
# https://bazel.build/reference/command-line-reference#flag--remote_upload_local_results
build --noremote_upload_local_results

# Whether to announce rc options.
# https://bazel.build/reference/command-line-reference#flag--announce_rc
common:verbose --announce_rc

# Add a timestamp to each message generated by Bazel specifying the time at which the message was
# displayed.
# https://bazel.build/docs/user-manual#show-timestamps
build:verbose --show_timestamps

# If a command fails, print out the full command line.
# https://bazel.build/reference/command-line-reference#flag--verbose_failures
build:verbose --verbose_failures

# Specifies desired output mode. Valid values are
# - 'summary' to output only test status summary
# - 'errors' to also print test logs for failed tests
# - 'all' to print logs for all tests
# - 'streamed' to output logs for all tests in real time
# https://bazel.build/reference/command-line-reference#flag--test_output
test --test_output=errors
test:verbose --test_output=streamed

# Warn if a test's timeout is significantly longer than the test's actual execution time.
# Bazel's default for test_timeout is medium (5 min), but most tests should instead be short (1 min).
# While a test's timeout should be set such that it is not flaky, a test that has a highly
# over-generous timeout can hide real problems that crop up unexpectedly.
# For instance, a test that normally executes in a minute or two should not have a timeout of
# ETERNAL or LONG as these are much, much too generous.
#
# https://bazel.build/docs/user-manual#test-verbose-timeout-warnings
test --test_verbose_timeout_warnings

# Run one test at a time.
# https://bazel.build/reference/command-line-reference#flag--test_strategy
test:nervous --test_strategy=exclusive

# Prevent long running tests from timing out.
# https://bazel.build/docs/user-manual#test-timeout
test:nervous --test_timeout=9999

# Always run tests even if they have cached results.
# https://bazel.build/docs/user-manual#cache-test-results
test:nervous --nocache_test_results

# Allow exclusive tests to run in the sandbox. Fixes a bug where Bazel doesn't enable sandboxing for
# tests with `tags=["exclusive"]`.
# https://bazel.build/reference/command-line-reference#flag--incompatible_exclusive_test_sandboxed
test --incompatible_exclusive_test_sandboxed

# If true, Bazel uses an environment with a static value for PATH and does not inherit LD_LIBRARY_PATH or TMPDIR.
# Letting environment variables like `PATH` sneak into the build can cause massive cache misses when they change.
# Use `--action_env=ENV_VARIABLE` if you want to inherit specific environment variables from the
# client, but note that doing so can prevent cross-user caching if a shared cache is used.
#
# https://bazel.build/reference/command-line-reference#flag--incompatible_strict_action_env
build --incompatible_strict_action_env

# Disables a legacy feature where local sandboxed execution can silently fall back to non-sandboxed
# if an action can't be run in a sandbox. This will be the default flag in a future release (probably 7.0).
#
# https://github.com/bazelbuild/bazel/issues/16522
build --noincompatible_legacy_local_fallback

# Don't allow network access for build actions in the sandbox.
# Need to tag targets with `tags=["requires-network"]` to opt-out of the enforcement.
# https://bazel.build/reference/command-line-reference#flag--sandbox_default_allow_network
build --sandbox_default_allow_network=false

# Change the current hostname to 'localhost' for sandboxed actions.
# https://bazel.build/reference/command-line-reference#flag--sandbox_fake_hostname
build --sandbox_fake_hostname

# Change the current username to 'nobody' for sandboxed actions.
# https://bazel.build/reference/command-line-reference#flag--sandbox_fake_username
build --sandbox_fake_username

# Directories used by sandboxed non-worker execution may be reused to avoid unnecessary setup costs.
# Save time on Sandbox creation and deletion when many of the same kind of action run during the
# build.
#
# https://bazel.build/reference/command-line-reference#flag--reuse_sandbox_directories
build --reuse_sandbox_directories

# If set to true, each Linux sandbox will have its own dedicated empty directory mounted as /tmp rather than
# sharing /tmp with the host filesystem. Use --sandbox_add_mount_pair=/tmp to keep seeing the host's /tmp in all sandboxes.
# https://bazel.build/reference/command-line-reference#flag--incompatible_sandbox_hermetic_tmp
build --incompatible_sandbox_hermetic_tmp

# Do not automatically create `__init__.py` files in the runfiles of Python targets. Fixes the wrong
# default using `__init__.py` to delimit a Python package.
# Precisely, when a `py_binary` or `py_test` target has `legacy_create_init` set to `auto (the
# default), it is treated as false if and only if this flag is set.
#
# https://github.com/bazelbuild/bazel/issues/10076.
# https://bazel.build/reference/command-line-reference#flag--incompatible_default_to_explicit_init_py
build --incompatible_default_to_explicit_init_py

build:linux --action_env=CC=gcc
build:linux --action_env=CXX=gcc++

build:macos --action_env=CC=clang
build:macos --action_env=CXX=clang++
build:macos --@openssl//:out_lib_dir=lib

# https://github.com/bazelbuild/rules_foreign_cc/issues/1186
build:macos --host_action_env=CXXFLAGS=-Wno-int-conversion
build:macos --host_action_env=CFLAGS=-Wno-int-conversion
build:macos --action_env=CXXFLAGS=-Wno-int-conversion
build:macos --action_env=CFLAGS=-Wno-int-conversion

# rustc flags for proc-macros, cargo_build_script, etc.
build --@rules_rust//rust/settings:extra_exec_rustc_flags=-Copt-level=3

# Some tools like sanitizers depend on nightly.
# https://github.com/bazelbuild/rules_rust/blob/main/rust/toolchain/channel/BUILD.bazel
build:stable --platforms=//platforms:stable
build:stable --@rules_rust//rust/toolchain/channel=stable
build:nightly --platforms=//platforms:nightly
build:nightly --@rules_rust//rust/toolchain/channel=nightly

# compilation_mode to rustc codegen options
# fastbuild: -Copt-level=0 -Cdebuginfo=0
# dbg:       -Copt-level=0 -Cdebuginfo=2
# opt:       -Copt-level=3 -Cdebuginfo=0
build:release --compilation_mode=opt
build:release --@rules_rust//rust/settings:extra_rustc_flag=-Cdebug-assertions=off
build:release --@rules_rust//rust/settings:extra_rustc_flag=-Coverflow-checks=off
build:release --@rules_rust//rust/settings:extra_rustc_flag=-Cpanic=unwind
build:release --@rules_rust//rust/settings:extra_rustc_flag=-Clto=fat
build:release --@rules_rust//rust/settings:extra_rustc_flag=-Ccodegen-units=1

# build:debug --compilation_mode=dbg
# build:debug --@rules_rust//rust/settings:extra_rustc_flag=-Cdebug-assertions=on
# build:debug --@rules_rust//rust/settings:extra_rustc_flag=-Coverflow-checks=on
# build:debug --@rules_rust//rust/settings:extra_rustc_flag=-Cpanic=unwind
# build:debug --@rules_rust//rust/settings:extra_rustc_flag=-Clto=fat
# build:debug --@rules_rust//rust/settings:extra_rustc_flag=-Ccodegen-units=32

# Controls whether Bazel will strip debugging information from all binaries and shared libraries,
# by invoking the linker with the -Wl,--strip-debug option.
build:strip --strip=always

# Controls stripping of debuginfo and similar auxiliary data from binaries during linking.
# * debuginfo
#   debuginfo sections and debuginfo symbols from the symbol table section are stripped at link time
#   and are not copied to the produced binary or separate files.
#
# * symbols
#   same as debuginfo, but the rest of the symbol table section is stripped
#   as well if the linker supports it.
build:strip --@rules_rust//rust/settings:extra_rustc_flag=-Cstrip=debuginfo

# clippy
build:clippy --aspects=@rules_rust//rust:defs.bzl%rust_clippy_aspect
build:clippy --output_groups=+clippy_checks
build --@rules_rust//rust/settings:clippy.toml=//:.clippy.toml

# rustfmt
build:rustfmt --aspects=@rules_rust//rust:defs.bzl%rustfmt_aspect
build:rustfmt --output_groups=+rustfmt_checks
build --@rules_rust//rust/settings:rustfmt.toml=//:.rustfmt.toml

# Load extra bazel settings if any.
try-import %workspace%/.bazelrc.local
