# Allow the Bazel server to check directory sources for changes. Ensures that the Bazel server
# notices when a directory changes, if you have a directory listed in the srcs of some target.
# Recommended when using
# - rules_js: https://github.com/aspect-build/rules_js
# - copy_directory: https://github.com/bazel-contrib/bazel-lib/blob/main/docs/copy_directory.md
# since npm package are source directories inputs to copy_directory actions.
# https://bazel.build/reference/command-line-reference#flag--host_jvm_args
startup --host_jvm_args=-DBAZEL_TRACK_SOURCE_DIRECTORIES=1

# Bazel picks up host-OS-specific config lines from bazelrc files.
# https://bazel.build/reference/command-line-reference#flag--enable_platform_specific_config
common --enable_platform_specific_config

# Output a heap dump if an OOM is thrown during a Bazel invocation.
# The dump will be written to `<output_base>/<invocation_id>.heapdump.hprof`.
# https://bazel.build/reference/command-line-reference#flag--heap_dump_on_oom
common --heap_dump_on_oom

# Specifies desired output mode. Valid values are
# - 'summary' to output only test status summary
# - 'errors' to also print test logs for failed tests
# - 'all' to print logs for all tests
# - 'streamed' to output logs for all tests in real time
# https://bazel.build/reference/command-line-reference#flag--test_output
test --test_output=errors

# Speed up all builds by not checking if external repository files have been modified.
# https://github.com/bazelbuild/bazel/blob/1af61b21df99edc2fc66939cdf14449c2661f873/src/main/java/com/google/devtools/build/lib/bazel/repository/RepositoryOptions.java#L244
common --noexperimental_check_external_repository_files

# Set default value of `allow_empty` to `False` in `glob()`. This prevents a common mistake when
# attempting to use `glob()` to match files in a subdirectory that is opaque to the current package
# because it contains a BUILD file. See https://github.com/bazelbuild/bazel/issues/8195.
# https://bazel.build/reference/command-line-reference#flag--incompatible_disallow_empty_glob
common --incompatible_disallow_empty_glob

# Enable the protoc toolchain support, introduced in Bazel 7.
common --incompatible_enable_proto_toolchain_resolution

# If true, Bazel uses an environment with a static value for PATH and does not inherit LD_LIBRARY_PATH or TMPDIR.
# Letting environment variables like `PATH` sneak into the build can cause massive cache misses when they change.
# Use `--action_env=ENV_VARIABLE` if you want to inherit specific environment variables from the
# client, but note that doing so can prevent cross-user caching if a shared cache is used.
# https://bazel.build/reference/command-line-reference#flag--incompatible_strict_action_env
build --incompatible_strict_action_env

# About sandboxing
# - On Linux, sandboxing is enabled by default for all actions.
# - A Bazel action can disable sandboxing intentionally by using `tags=["no-sandbox"]`.
# - Sandboxing can be disabled globally with an option like --spawn_strategy=local.

# Lets the sandbox create its sandbox directories underneath this path. Specify a path on tmpfs (like /run/shm)
# to possibly improve performance a lot when your build / tests have many input files.
# Note: You need enough RAM and free space on the tmpfs to hold output and intermediate files generated by running actions. 
# build --sandbox_base=

# If set to true, each Linux sandbox will have its own dedicated empty directory mounted as /tmp rather than
# sharing /tmp with the host filesystem. Use --sandbox_add_mount_pair=/tmp to keep seeing the host's /tmp in all sandboxes.
# https://bazel.build/reference/command-line-reference#flag--incompatible_sandbox_hermetic_tmp
build --incompatible_sandbox_hermetic_tmp

# Don't allow network access for build actions in the sandbox.
# Need to tag targets with `tags=["requires-network"]` to opt-out of the enforcement.
# https://bazel.build/reference/command-line-reference#flag--sandbox_default_allow_network
build --nosandbox_default_allow_network

# Change the current hostname to 'localhost' for sandboxed actions.
# https://bazel.build/reference/command-line-reference#flag--sandbox_fake_hostname
build --sandbox_fake_hostname

# Change the current username to 'nobody' for sandboxed actions.
# https://bazel.build/reference/command-line-reference#flag--sandbox_fake_username
build --sandbox_fake_username

# Directories used by sandboxed non-worker execution may be reused to avoid unnecessary setup costs.
# Save time on Sandbox creation and deletion when many of the same kind of action run during the
# build.
# https://bazel.build/reference/command-line-reference#flag--reuse_sandbox_directories
build --reuse_sandbox_directories

# Disables a legacy feature where local sandboxed execution can silently fall back to non-sandboxed
# if an action can't be run in a sandbox. This will be the default flag in a future release (probably 7.0).
# https://bazel.build/reference/command-line-reference#flag--legacy_external_runfiles
build --noincompatible_legacy_local_fallback

# Allow exclusive tests to run in the sandbox. Fixes a bug where Bazel doesn't enable sandboxing for
# tests with `tags=["exclusive"]`.
# https://bazel.build/reference/command-line-reference#flag--incompatible_exclusive_test_sandboxed
test --incompatible_exclusive_test_sandboxed

# Warn if a test's timeout is significantly longer than the test's actual execution time.
# Bazel's default for test_timeout is medium (5 min), but most tests should instead be short (1 min).
# While a test's timeout should be set such that it is not flaky, a test that has a highly
# over-generous timeout can hide real problems that crop up unexpectedly.
# For instance, a test that normally executes in a minute or two should not have a timeout of
# ETERNAL or LONG as these are much, much too generous.
#
# https://bazel.build/docs/user-manual#test-verbose-timeout-warnings
test --test_verbose_timeout_warnings

# Do not build runfiles symlink forests for external repositories under
# `.runfiles/wsname/external/repo` (in addition to `.runfiles/repo`). This reduces runfiles &
# sandbox creation times & prevents accidentally depending on this feature which may flip to off by
# default in the future. Note, some rules may fail under this flag, please file issues with the rule
# author.
# https://bazel.build/reference/command-line-reference#flag--legacy_external_runfiles
build --nolegacy_external_runfiles

# Do not automatically create `__init__.py` files in the runfiles of Python targets. Fixes the wrong
# default using `__init__.py` to delimit a Python package.
# Precisely, when a `py_binary` or `py_test` target has `legacy_create_init` set to `auto (the
# default), it is treated as false if and only if this flag is set.
#
# https://github.com/bazelbuild/bazel/issues/10076.
# https://bazel.build/reference/command-line-reference#flag--incompatible_default_to_explicit_init_py
build --incompatible_default_to_explicit_init_py
